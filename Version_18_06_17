% On rend dynamiques les prédicats qui décrivent le plateau de jeu et le joueur actif

:- dynamic(pogo/1).
:- dynamic(tour/1).

pion(rouge).
pion(noir).

tour(pion(noir)).

%Tableau de jeu

pogo( 
	  [
	  [1,pion(rouge),pion(rouge)] , [2,pion(rouge),pion(rouge)], [3,pion(rouge),pion(rouge)],
      [4] , [5], [6],
      [7,pion(noir),pion(noir)] , [8,pion(noir),pion(noir)], [9,pion(noir),pion(noir)] 
	  ]
).

%Jeu

voisin(1,2).
voisin(1,4).

voisin(2,1).
voisin(2,3).
voisin(2,5).

voisin(3,2).
voisin(3,6).

voisin(4,1).
voisin(4,5).
voisin(4,7).

voisin(5,2).
voisin(5,4).
voisin(5,6).
voisin(5,8).

voisin(6,3).
voisin(6,5).
voisin(6,9).

voisin(7,8).
voisin(7,4).

voisin(8,7).
voisin(8,5).
voisin(8,9).

voisin(9,6).
voisin(9,8).

sommetA(L) :- pogo(L).


%On regarde si le déplacement est possible
check(X, 1, Y) :- voisin(X, Y).
check(X, N, Y):- N > 1, M is N-1, voisin(X,Z), check(Z, M , Y).

% on récupère le premier pion de la liste
sommet(X, [X|_]).

sommet2(X, [_,X|_]).

%on récupère la longueur de la liste%
longueur([],0). % attention, retirer 1 si on calcul une liste avec l'index présent en tête de liste
longueur([_|L],N) :- longueur(L,N1), N is N1+1.



%Pour récupérer une pile (case) avec son index getPile(Index, Liste de retour)
getPileN(I , N, L ,L2) :- /*pogo(L2),*/temp(I, N ,L, L2, L3,L2), retract(pogo(L2)) ,asserta(pogo(L3)).
getP_sub3(0, L , [] , L) :- !.
getP_sub3(N, [E|R], [E|L], L1) :- N1 is N-1, getP_sub3(N1, R, L, L1), !.
temp( I , N ,L, [ [I | X ] | R1 ], R,_) :- getP_sub3(N, X, L, R10), concat([I], R10, R2), concat([R2], R1, R), !. 
temp( I , N ,X, [ [ A | B ] | L ], [ [ A | B ] |  R ],L3) :- temp(I ,N, X ,L, R,L3), !. 

%ajouter une pile de N éléments à une pile d'indice I
setPile(I, L , L2) :- /*pogo(L2),*/temp2(I, L, L2, L3,L2), retract(pogo(L2)) , asserta(pogo(L3)).
temp2( I ,L, [ [ I | R1 ] | R ], R5,_) :- concat(L, R1, R3), concat([I], R3, R4), concat([R4], R, R5).
temp2( I , X, [ [ A | B ] | L ], [  [ A | B ] | L2],LL) :- temp2(I ,X , L, L2,LL), !. 

getPile(X , L) :- pogo(L2), tempo(X, L, L2). 
tempo( I ,X, [ [I | X ] | _ ]) :- !. 
tempo( I , X, [ [ _ | _ ] | L ] ) :- tempo(I , X , L), !.

% prédicat qui regroupe toutes les vérifications préalables avant un de déplacer des pions
isValide(D, N) :- tour(J), getPile(D, L), sommet(J, L), longueur(L, M), M >= N, N =< 3.


deplacer(D, N , A) :- getPileN(D, N, L), setPile(A, L),!.

% check+isValide
changerTour(pion(noir)) :- retract(tour(pion(noir))),asserta(tour(pion(rouge))),!.
changerTour(pion(rouge)) :- retract(tour(pion(rouge))), asserta(tour(pion(noir))),!.

%vérifie si la partie est terminé, le joueur courant doit être envoyé
fin(J) :- fin_sub(J, 9), write('Fin, joueur '), tour(J), write(J), write(' gagne!').
fin_sub( _ , 0).
fin_sub(J, I) :- I > 0, getPile(I,L) , sommet(J, L), I2 is I-1 ,fin_sub(J, I2), !.
fin_sub(J, I) :- I > 0, getPile(I,L), longueur(L,0), I2 is I-1, fin_sub(J ,I2).

hauteurMax([], 0).
hauteurMax([ E | R ], N) :- longueur(E, M), hauteurMax(R, N2), M > N2, N is M, !.
hauteurMax([ _ | R ], N) :- hauteurMax(R, N).
%predicat en pour une éventuelle représentation de la scène sur le terminal

eval(J, N) :- pogo(L), eval_sub(L, J, N).%ajouter une verification si jeu fini ?
eval_sub([], _, 0).
eval_sub([ E | R ], J, N) :- sommet2(J, E), eval_sub(R, J, N1)/*, sommet(J2, E)*/, eval_sub2(E, J, N2), N is N1+1+N2, !.
eval_sub([ _ | R ], J, N) :- eval_sub(R, J, N).
eval_sub2(E, J2, N2) :- pogo(L), eval_subsub2(L, E ,J2, N2 ,false).%on initialise à false si la tour ne peut pas etre prise
eval_subsub2([], _ , _ , 0 , true).
eval_subsub2([], _ , _ , 1, false).
eval_subsub2([ [ I | RX ] | R ], E2 ,J2, N2, _) :- not(sommet(J2,RX)) , not(sommet(I, E2)), longueur(RX, T), T >= 1, sommet(X2, E2) , check(X2, 1, I), eval_subsub2(R, E2, J2, N2 ,true), !.
eval_subsub2([ [ I | RX ] | R ], E2 ,J2, N2, _) :- not(sommet(J2,RX))  , not(sommet(I, E2)), longueur(RX, T), T >= 2,sommet(X2, E2) ,check(X2, 2, I), eval_subsub2(R, E2, J2, N2, true), !.
eval_subsub2([ [ I | RX ] | R ], E2 ,J2, N2, _) :- not(sommet(J2,RX))  , not(sommet(I, E2)), longueur(RX, T), T >= 3, sommet(X2, E2) ,check(X2, 3, I), eval_subsub2(R, E2, J2, N2, true), !.
eval_subsub2( [ _ | R ], E2, J2, N2, N3 ) :- eval_subsub2(R, E2, J2, N2, N3).

succ(J, D, A,N,L) :- succ_sub(L, J, D, A,N).
succ_sub([], _ , _ , _, _).
succ_sub([ E | R ], J, D, A, N ) :- sommet2(J, E), succ_sub(R, J, D, A,N), coup(E ,D ,A ,N).
succ_sub([ _ | R ], J, D, A, N) :- succ_sub(R, J, D, A, N).
coup([ I | R], I , A, 1) :- longueur(R, T), T >= 1, check(I, 1, A).
coup([ I | R], I , A, 2) :- longueur(R, T), T >= 1, check(I, 2, A).
coup([ I | R], I , A, 3) :- longueur(R, T), T >= 3, check(I, 3, A).

/*deplacer2(D, N , A , L) :- getPileN(D, N, L2, L), setPile(A, L2, L),!.

coupsPossibles(Profondeur, Joueur) :- pogo(L), cpp(Profondeur, Joueur, L).
cpp(0, _, _).
cpp(P, J, L) :- succ(J, D, A ,N, L), deplacer(D, N , A ,L), pogo(L3), noeud(L3),*/

jouer(D, N , A) :- check(D , N, A), isValide(D , N), deplacer(D, N , A), tour(J), not(fin(J)), changerTour(J).
%verifier si jeu est fini

concat([],L,L).
concat([E1|R1],L,[E1|R2]) :- concat(R1,L,R2).
%[[1,2,3],[1,2,3],[1]]
%pogo([[1, pion(noir), pion(rouge), pion(rouge)], [2], [3, pion(noir), pion(rouge), pion(rouge)], [4], [5], [6, pion(noir), pion(rouge), pion(rouge), pion(noir)], [7], [8, pion(noir), pion(noir)], [9]]).
%pogo([[1, pion(rouge), pion(rouge)], [2, pion(noir)], [3, pion(noir), pion(rouge), pion(rouge)], [4], [5], [6, pion(noir), pion(rouge), pion(rouge), pion(noir)], [7], [8, pion(noir), pion(noir)], [9]]).

